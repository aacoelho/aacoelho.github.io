@charset "UTF-8";
/*********************
BREAKPOINTS
*********************/
@import url("https://fonts.googleapis.com/css?family=Work+Sans:100,200,300,400,500,600,700,800,900");
/**
 * How to declare variables:
 * $a_name
 *
 * a: Should be the initial of the variable type
 * (c - color, b - breakpoint, f - font/font weight, s - size, d - duration).
 *
 * name: Should be the name of the variable.
 *
 */
/* BREAKPOINTS */
/* SIZES */
/* ANIMATION */
/**
 * This stylesheet has 2 sections:
 *
 * 1.Basic Colors - Where are defined the colors at a very high level using internal variables.
 * These variables are only used to be assigned to other variables.
 * The name of the internal colors should follow this rule:
 * $x_blue_light
 * $x_blue_main
 * $x_blue_dark
 *
 * The accent colors of the project should be assigned to other internal variables:
 * $x_primary_light
 * $x_primary_main
 * $x_primary_medium
 * $x_primary_dark
 *
 * $x_secondary_light
 * $x_secondary
 * $x_secondary_medium
 * $x_secondary_dark
 *
 * 2.Website Colors - Where are assigned the colors to website elements.
 * The name of this variables should follow this rule:
 * $c_nav_text
 * The variable begins with the initial of the variable type c (color),
 * followed by the element, and the section of the element where will be applied the color.
 * $c_nav
 * In this case this variable represents the background color of the element.
 *
 * Rules of color variables:
 * 1. Never use an internal variable outside this page ($x_..._...)
 * 2. Never use the hexadecimal codes to atribute colors outside this page.
 * 3. To apply a new color to a section, create a new color on Section 1,
 * before assign it to an element in Section 2.
 * 4. Delete and add new variables in each section, according to the need of the project.
 *
 */
/* BASIC COLORS */
/**/
/**/
/**/
/**/
/**/
/**/
/* WEBSITE COLORS */
/**/
/**/
/**/
/**/
/**/
/**/
/**/
/**/
/**
 * Sheet to import fonts to be used and to define text styles.
 */
/* FONTS */
@import url("https://fonts.googleapis.com/css?family=Muli:200,200i,300,300i,400,400i,600,600i,700,700i,800,800i,900,900i|Open+Sans:300,300i,400,400i,600,600i,700,700i,800,800i");
@import url("https://fonts.googleapis.com/icon?family=Material+Icons");
/* STYLES */
/* TEXT STYLES */
@media (min-width: 0px) {
  body {
    font-family: 'Open Sans', sans-serif;
    font-weight: 400;
    font-size: 16px;
    color: #22191F;
    -moz-osx-font-smoothing: grayscale;
    /*(For Firefox)*/
    -webkit-font-smoothing: antialiased;
    /*(For Chrome and Safari)*/ }
  h1 {
    font-family: 'Muli', sans-serif;
    font-weight: 600;
    font-size: 10vw;
    color: #FFFFFF; }
  p {
    font-weight: 400;
    font-size: 14px;
    color: #22191F;
    line-height: 24px; }
  b {
    font-weight: 700; }
  *:focus {
    outline: none; }
  a,
  a:hover,
  a:visited,
  a:link,
  a:active {
    text-decoration: none; }
  a:hover {
    cursor: pointer; } }

/**
 * Adapted from: https://codepen.io/chriscoyier/pen/uwJjr
 *
 * HTML example:
   <html>
     <head>
       Stuff
     </head>

     <div class="page_wrap">
       <nav>
         Olá
       </nav>

       <body>
         Stuff
       </body>
     </div>

     <footer>
       Adeus
     </footer>
   </html>
 *
 * Usage if you're using the default elements (previous example):
 * @include sticky-footer(30px);
 *
 * Usage if you want to define the elements:
 * @include sticky-footer(30px, '.page', '.footer');
 *
 */
/**
 * Adapted from: https://css-tricks.com/centering-css-complete-guide/, https://stackoverflow.com/questions/38221573/flexbox-vertical-centering-plus-a-sticky-footer
 *
 * HTML example:
   <div class="centered_div">
     <div class="child_centerer">
       Olá.
     </div>
   </div>
 *
 * CSS example:
   .centered_div{
    background-color: $x_primary_main;
    height: 500px;

    @include centerer_flexbox;

    .child_centerer
    {
       background-color: $x_warning_main;
    }

   }
 *
 * Usage if you're using the default elements (previous example):
 * @include centerer;
 *
 * Usage if you want to define the elements:
 * @include centerer(true, false);
 *
 */
/* Page */
* {
  margin: 0; }

*, *:before, *:after {
  box-sizing: inherit; }

html {
  box-sizing: border-box; }

html, body {
  height: 100%; }

.container {
  padding: 0px; }

body {
  background-color: blue; }

@media (min-width: 900px) {
  body {
    background-color: red; } }

/* Footer */
body {
  display: -ms-flexbox;
  display: flex;
  -ms-flex-direction: column;
      flex-direction: column;
  height: 100vh; }

.container {
  /* .push must be the same height as footer */
  -ms-flex: 1 0 auto;
      flex: 1 0 auto; }

footer {
  /* .push must be the same height as footer */
  height: 140px;
  display: -ms-grid;
  display: grid; }

@media (min-width: 0px) {
  footer {
    background-color: #22191F; } }

/* Mixins Buttons */
/* Fix for Firefox */
@-moz-document url-prefix() {
  .button {
    letter-spacing: 1px; } }

/* Buttons */

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
